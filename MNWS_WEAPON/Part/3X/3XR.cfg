PART
{
	// Kerbal Space Program - Part Config

	// --- general parameters ---
	name = 3XR
	module = Part
	author = Johnny005611

	// --- asset parameters ---
	MODEL
	{
		model = MNWS_WEAPON/Part/3X/3XR
		//scale = 1, 1, 1
	}
	rescaleFactor = 1


	// --- node definitions ---
	node_attach = 0.0, -0.0, 0, 0, -1, 0, 0
	node_stack_bottom = 0.0, 0.812, -6, 0, -1, 0, 2
	
	



	
	stackSymmetry = 1

	// --- editor parameters ---
	TechRequired = precisionEngineering
	entryCost = 2100
	cost = 950
	category = Coupling
	subcategory = 0
	title = 3XR
	manufacturer = Johnny005611
	description =   
	// attachment rules: stack, srfAttach, allowStack, allowSrfAttach, allowCollision
	attachRules = 1,0,1,0,1

	// --- standard part parameters ---
	mass = 5
	dragModelType = default
	maximum_drag = 0.2
	minimum_drag = 0.2
	angularDrag = 2
	crashTolerance = 600
	maxTemp = 520000
	

	RESOURCE
	{
		name = ElectricCharge
		amount = 10000
		maxAmount = 10000
	}

	
	
	MODULE
    {
	name = HitpointTracker
	ArmorThickness = 100
	maxHitPoints = 25000
    }
	
	
MODULE
    {
      name = ModuleRadar

          // -- Section: General Configuration --
          radarName = 3X Radar		// if left empty part.title is used, but advised to set this to a nice printable text
          rwrThreatType = 0				// IMPORTANT, please set correctly:
                                  // 0 = SAM site radar
                                  // 1 = Fighter radar (airborne)
                                  // 2 = AWACS radar (airborne)
                                  // 3, 4 = ACTIVE MISSILE (DO NOT USE UNLESS YOU KNOW WHAT YOU'RE DOING!
                                  // 5 = Detection radar (ground/ship based)
                                  // 6 = SONAR (ship/submarine based)
  	      //turretID = 0					// if needed
          resourceDrain = 0.05				// change to higher values for more capable radars, e.g AESA
 
          rotationTransformName = rotationTransform
          // -- Section: Capabilities --
          omnidirectional = true				// false: boresight scan radar
          directionalFieldOfView = 180			// for omni and boresight
          scanRotationSpeed = 240				// degress per second
          lockRotationSpeed = 240				// only relevant if canLock
          lockRotationAngle = 360
          showDirectionWhileScan = true			// can show target direction on radar screen. False: radar echos displayed as block only (no direction)
          multiLockFOV = 180				// only relevant if canLock
          lockAttemptFOV = 180				// only relevant if canLock
          maxLocks = 1000					//how many targets can be locked/tracked simultaneously. only relevant if canLock

          canScan = true					// scanning/detecting targets (volume search)
          canLock = true					// locking/tracking targets (fire control)
          canTrackWhileScan = true			// continue scanning while tracking a locked target
          canRecieveRadarData = true			// can work as passive data receiver (NOTE THE SPELLING! [SIC])


        radarGroundClutterFactor = 1			// how much is the radar efficiency reduced to by ground clutter/look-down?
                                // 0.0 = reduced to 0% (=IMPOSSIBLE to detect ground targets)
                                // 1.0 = fully efficient (no difference between air & ground targets)
                                // default if unset: 0.25
                                // Ground targets, especially ships, already have a massively larger RCS than fighters, hence
                                // any ground clutter factor >0.25 is to be considered very good, making an efficient surface/horizon search radar.
                                // values >1.0 are possible, meaning the radar is MORE efficient during look down than vs air targets.

          radarDetectionCurve
          {
            // floatcurve to define at what range (km) which minimum cross section (m^2) can be detected.
            // this defines both min/max range of the radar, and sensitivity/efficiency
            // it is recommended to define an "assured detection range", at which all craft are detected regardless
            //     of their rcs. This is achieved by using a minrcs value of zero, thus detecting everything.
            //        key = distance	rcs
                      key = 0.0	0
                      key = 600	0	//between 0 and 5 km the min cross section is 0, thus assured detection of everything
                      key = 1200	2   //
          }

          radarLockTrackCurve
          {
              // same as detectionCurve, just for locking/tracking purpose
              // ATTENTION: DO NOT USE an "assured locking range" here, as this would render lock-breaking
              //   ECM-jammers & chaff completely ineffective!!
              //      key = distance	rcs
                      key = 0.0	0
                      key = 600	0	//
                      key = 1200	2   //
          }
    }
	
	

MODULE
{
	name = ModuleECMJammer
	
	// Jammer capabilities:
	alwaysOn = false		// can be enabled/disabled, or is always on
					// Set this to true for "stealth" jammers that are integrated into Cockpits and serve
					// to reduce only the radar cross section, but without providing another jamming effect!

	resourceDrain = 0.05		// EC/sec. Set this higher for more capabale jammers.

	jammerStrength = 120		// this is a factor (in relation to a vessels base radar cross section) how much the crafts DETECTABILITY is INCREASED(!) when the jammer is active
	
	lockBreaker = true		// true: jammer serves to break radar locks (default: true)
	lockBreakerStrength = 50	// factor (in relation to a vessels base radar cross section) how strong the lockbreaking effect is

	rcsReduction = true		// jammer reduces a crafts radar cross section, simulating 2nd generation stealth (radar obsorbent coating)
	rcsReductionFactor = 0		// factor for radar cross section: from 0 (craft is invisible) to 1 (no effect)
}
	
	

	MODULE
	{
	  name = MNWSCategoryModule
	}
}
